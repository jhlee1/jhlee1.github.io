<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Webprogramming on Code Repository</title>
    <link>https://jhlee1.github.io/tags/webprogramming/</link>
    <description>Recent content in Webprogramming on Code Repository</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 12 Apr 2019 17:08:52 +0900</lastBuildDate>
    
        <atom:link href="https://jhlee1.github.io/tags/webprogramming/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>JavascriptAsync</title>
      <link>https://jhlee1.github.io/2019/javascriptasync/</link>
      <pubDate>Fri, 12 Apr 2019 17:08:52 +0900</pubDate>
      
      <guid>https://jhlee1.github.io/2019/javascriptasync/</guid>
      <description>1. AJAX와 비동기 function ajax() { var oReq = new XMLHttpRequest(); oReq.addEventListener(&amp;quot;load&amp;quot;, function() { //밑에 oReq.open과 oReq.send보다 더 늦게 실행됨. console.log(this.responseText); }); oReq.open(&amp;quot;GET&amp;quot;, &amp;quot;http://www.example.org/example/txt&amp;quot;); oReq.send(); }   비동기로 실행되는 EventListener속에 있는 anonymous 함수는 브라우저가 가지고 있는 Web Apis와 Callback Queue(=task queue)를 거쳐서 다시 Call Stack으로 들어가기 때문에 가장 나중에 실행됨.(Call stack -&amp;gt; Web Apis -&amp;gt; Callback Queue -&amp;gt; Call stack이 비어있는지 확인 후 Call Stack으로 이동 후 -&amp;gt; execute의 단계를 거침)</description>
    </item>
    
    <item>
      <title>DOM APIs</title>
      <link>https://jhlee1.github.io/2019/dom_apis/</link>
      <pubDate>Fri, 12 Apr 2019 10:53:30 +0900</pubDate>
      
      <guid>https://jhlee1.github.io/2019/dom_apis/</guid>
      <description>DOM API 활용 1. 다양한 APIs  document. 관련API element. 관련 API  2. DOM 엘리먼트 오브젝트  tagName : Element의 tag name textContent : Node의 text content를 설정하거나 얻어옴 nodeType : Node type을 숫자로 나타냄 childNodes: Element의 Childs를 Node List로 나타냄 (Text node, Comment node 포함)  ex) ```javascript Javascipt 코드 var ul = document.querySelector(&amp;ldquo;ul&amp;rdquo;); var ulChildNodes = ul.childNodes   for (var index = 0; index &amp;lt; ulChildNodes.</description>
    </item>
    
    <item>
      <title>SpringCore</title>
      <link>https://jhlee1.github.io/2019/springcore/</link>
      <pubDate>Wed, 27 Feb 2019 23:10:04 +0900</pubDate>
      
      <guid>https://jhlee1.github.io/2019/springcore/</guid>
      <description>Spring Core 1. Spring 특징  엔터프라이즈급 어플리케이션을 구축할 수 있는 가벼운 솔루션이자, One-Stop-Shop(모든 과정을 한꺼번에 해결) 모듈화  약 20개의 모듈로 구성 필요한 모듈만 가져다 사용  IoC Container 선언적 Transaction을 관리할 수 있다 MVC Framework 제공 AOP  2. Spring Core 모듈  AOP와 Instrumentation
 spring-AOP : AOP 얼라이언스(Alliance)와 호환되는 방법으로 AOP를 지원 spring-aspects : AspectJ와의 통합을 제공 spring-instrument : instrumentation을 지원하는 클래스와 특정 WAS에서 사용하는 클래스로 더 구현체를 제공 BCI(Byte Code Instrumentations) - 런타임이나 로드(Load) 때 클래스의 바이트 코드에 변경을 가하는 방법  Messaging</description>
    </item>
    
    <item>
      <title>JavascriptObject</title>
      <link>https://jhlee1.github.io/2019/javascriptobject/</link>
      <pubDate>Wed, 27 Feb 2019 22:19:33 +0900</pubDate>
      
      <guid>https://jhlee1.github.io/2019/javascriptobject/</guid>
      <description>Javascript Object 1. 객체  key, value의 자료구조 {}로 자료를 표현하며, JSON형식이랑 같다.  2. 선언 var obj = {name: &amp;quot;John Doe&amp;quot;, age: 20, addition: [{name: &amp;quot;another one&amp;quot;, age: 99}]} console.log(obj.name); // John Doe console.log(obj[&amp;quot;name&amp;quot;]); // John Doe console.log(obj[name]); // Error : name이라는 변수를 찾기 때문에 console.log(obj.addition[0].name); // another one  3. 객체 탐색  For-in loop  for-in은 key값을 탐색하기 위한 것이므로 Array(배열)가 아니라 Object(객체)에 사용한다   var obj = {name: &amp;quot;John Doe&amp;quot;, age: 20, addition: [{name: &amp;quot;another one&amp;quot;, age: 99}]} for(key in obj) { console.</description>
    </item>
    
    <item>
      <title>JavascriptArray</title>
      <link>https://jhlee1.github.io/2019/javascriptarray/</link>
      <pubDate>Wed, 27 Feb 2019 21:58:12 +0900</pubDate>
      
      <guid>https://jhlee1.github.io/2019/javascriptarray/</guid>
      <description>Javascript Array 1. 배열 선언 var arr = []; var arr = [1, 2, 3, &amp;quot;hello&amp;quot;, null, true, [[{1:0}]]]; console.log(arr.length); // 7   new Array()로 선언할 수 도 있지만 대부분 []을 사용  2. 원소 추가  index를 이용한 추가  var arr = [4]; arr[1000] = 3; console.log(a.length); // 1001 console.log(arr[500]); // undefined   push를 이용한 추가  var arr = [4]; arr.push(5); console.log(arr.length); // 2  3.</description>
    </item>
    
    <item>
      <title>RESTAPI</title>
      <link>https://jhlee1.github.io/2019/restapi/</link>
      <pubDate>Tue, 26 Feb 2019 23:29:11 +0900</pubDate>
      
      <guid>https://jhlee1.github.io/2019/restapi/</guid>
      <description>REST API 1. REST API 조건  REST API라 불리기 위해선 아래의 조건들이 필요하다. 대부분의 조건은 만족하기 쉽지만 웹페이지가 아닌 API상에서 uniform interface의 하위 조건 중 일부를 만족하기 어려움 client-server stateless cache uniform interface layered system code-on-demand (optional) 위의 조건중 uniform interface의 조건  리소스가 URI로 식별되야 한다. 리소스를 생성,수정,추가하고자 할 때 HTTP메시지에 표현을 해서 전송해야 한다. 메시지는 스스로 설명할 수 있어야 한다. (Self-descriptive message) 애플리케이션의 상태는 Hyperlink를 이용해 전이되어야 한다.</description>
    </item>
    
    <item>
      <title>SQL Data Definition Language</title>
      <link>https://jhlee1.github.io/2019/sql_ddl/</link>
      <pubDate>Sun, 17 Feb 2019 00:44:19 +0900</pubDate>
      
      <guid>https://jhlee1.github.io/2019/sql_ddl/</guid>
      <description>DDL(Data Definition Language) 1. 정의  DB의 schema를 생성, 변경 제거  2. MySQL Data type  Check this link (https://dev.mysql.com/doc/refman/8.0/en/data-type-overview.html). I will summarize later  3. Create table  기본형
 CREATE TABLE tableName( field1 type [NULL | NOT NULL][DEFAULT][AUTO_INCREMENT] field2 type [NULL | NOT NULL][DEFAULT][AUTO_INCREMENT] field3 type [NULL | NOT NULL][DEFAULT][AUTO_INCREMENT] &amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip; PRIMARY KEY(fieldName)  );
 NULL, NOT NULL로 필드에 빈 값 허용 여부 결정
 DEFAULT - 입력 값이 없는 경우 초기값 결정</description>
    </item>
    
    <item>
      <title>SQL(Data Manipulation Language)</title>
      <link>https://jhlee1.github.io/2019/sql_dml/</link>
      <pubDate>Sun, 17 Feb 2019 00:35:56 +0900</pubDate>
      
      <guid>https://jhlee1.github.io/2019/sql_dml/</guid>
      <description>DML(Data Manipulation Language) 1. SELECT  기본형  SELECT(DISTINCT) column (ALIAS) FROM table;  SELECT - 찾는 데이터(Column)을 나열 DISTINCT - 중복행 제거 ALIAS - 나타날 Column에 대한 다른 이름 부여 FROM - 선택한 Column이 있는 테이블을 명시
 ex) 전체 데이터 검색
 SELECT * FROM DEPARTMANT;   +--------+------------+----------+ | deptno | name | location | +--------+------------+----------+ | 10 | ACCOUNTING | NEW YORK | | 20 | RESEARCH | DALLAS | | 30 | SALES | CHICAGO | | 40 | OPERATIONS | BOSTON | +--------+------------+----------+ 4 rows in set (0.</description>
    </item>
    
    <item>
      <title>SQL Basic</title>
      <link>https://jhlee1.github.io/2019/sqlbasic/</link>
      <pubDate>Sat, 16 Feb 2019 21:45:07 +0900</pubDate>
      
      <guid>https://jhlee1.github.io/2019/sqlbasic/</guid>
      <description>1. SQL이란  SQL은 데이터를 쉽게 검색하고 추가, 삭제, 수정 같은 조작을 할 수 있도록 만들어진 언어 RDBMS에서 데이터를 조작, 쿼리하는 표준 수단 키워드는 대소문자를 구분하지 않음 (아래의 쿼리는 모두 같다)  mysql&amp;gt; SELECT VERSION(), CURRENT_DATE; mysql&amp;gt; select version(), current_date; mysql&amp;gt; SeLeCT vErsiOn(), CUrrENT_DATE;  QUERY를 계산식으로 쓸 수 있다.  mysql&amp;gt; SELECT SIN(PI() / 4), (4+1) * 5;   +--------------------+-----------+ | SIN(PI() / 4) | (4+1) * 5 | +--------------------+-----------+ | 0.</description>
    </item>
    
    <item>
      <title>Install &amp; Set up My SQL</title>
      <link>https://jhlee1.github.io/2019/setupmysql/</link>
      <pubDate>Sat, 16 Feb 2019 21:12:24 +0900</pubDate>
      
      <guid>https://jhlee1.github.io/2019/setupmysql/</guid>
      <description>Set up MySQL Community Server in windows 1. 다운로드  https://www.mysql.com/downloads/ 여기서 Community Server의 다운로드 중 mysql-installer-community-X.0.XX.0.msi 받기
 web-community과 community 파일의 차이는 설치중에 파일을 받아서 설치하는 것 (인터넷 연결 필요)과 이미 설치파일에 들어있는 파일을 설치하는 것 (인터넷 연결 불필요). 따라서 설치 파일의 용량이 차이남
  2. 설치  msi파일을 실행 후 SetUp Type을 Developer Default로 설치 root 비밀번호만 정하고 Next 누르면됨 윈도우가 켜질 때 실행시키려면 Windows Service 설정에서 시작시 켜지도록 설정해놓으면 됨 환경변수 설정 - C:Program Files\MySQL\MySQL Server X.</description>
    </item>
    
    <item>
      <title>Database</title>
      <link>https://jhlee1.github.io/2019/database/</link>
      <pubDate>Fri, 15 Feb 2019 01:31:19 +0900</pubDate>
      
      <guid>https://jhlee1.github.io/2019/database/</guid>
      <description>Database와 DBMS(DataBase Management System) 1. 기본 개념  데이터의 집합(a Set of Data) 여러 응용 시스템(프로그램)들의 통합된 정보들을 저장하여 운영할 수 있는 공용(share) data의 집합 효율적으로 저장, 검색, 갱신할 수 있도록 데이터 집합들끼리 연관시키고 조직화되어야 한다.  2. 특성  실시간 접근성(Real-time Accessability)  사용자의 요구를 즉시 처리  계속적인 변화(Continuous Evolution)  정확한 값을 유지하려고 삽입, 삭제, 수정 작업 등을 이용해 데이터를 지속적으로 갱신  동시 공유성(Concurrent Sharing)  사용자마다 다른 목적으로 사용하므로 동시에 여러 사람이 동일한 데이터에 접근, 이용  내용 참조(Content Reference)  저장한 data의 record의 위치나 주소가 아닌 사용자가 요구하는 data의 내용, 즉 data 값에 따라 참조(reference)할 수 있어야 한다.</description>
    </item>
    
    <item>
      <title>JspBasic</title>
      <link>https://jhlee1.github.io/2019/jspbasic/</link>
      <pubDate>Wed, 06 Feb 2019 02:51:19 +0900</pubDate>
      
      <guid>https://jhlee1.github.io/2019/jspbasic/</guid>
      <description>JSP(Java Server Page)  모든 JSP는 Servlet으로 변경되어 작동한다. -&amp;gt; Servlet과 같은 LifeCycle을 가짐 &amp;lt;%@를 지시자라고 한다. &amp;lt;%@ page는 페이지 지시자라고 한다. JSP를 작성할 때 Servlet으로 어떻게 변경될까에 대해 생각하면서 하자 1 ~ 10까지 출력하는 예제   sum10.jsp &amp;lt;%@ page language=&amp;quot;java&amp;quot; contentType=&amp;quot;text/html; charset=UTF-8&amp;quot; pageEncoding=&amp;quot;UTF-8&amp;quot; %&amp;gt; &amp;lt;!DOCTYPE html PUBLIC &amp;quot;-//W3C//DTD HTML 4.01 Transitional//EN&amp;quot; &amp;quot;http://www.w3.org/TR/html4/loose.dtd&amp;quot;&amp;gt; &amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta http-equiv=&amp;quot;Content-Type&amp;quot; content=&amp;quot;text/html; charset=UTF-8&amp;quot;&amp;gt; &amp;lt;title&amp;gt;Insert title here&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;% int total = 0; for(int i = 1; i &amp;lt;= 10; i++) { total = total + i; } %&amp;gt; 1부터 10까지의 합: &amp;lt;%= total %&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt;   JSP의 LifeCycle</description>
    </item>
    
    <item>
      <title>JavascriptBasic</title>
      <link>https://jhlee1.github.io/2019/javascriptbasic/</link>
      <pubDate>Thu, 31 Jan 2019 22:35:29 +0900</pubDate>
      
      <guid>https://jhlee1.github.io/2019/javascriptbasic/</guid>
      <description>Javascript Hoisitng 함수는 실행되기 전 함수 안의 필요한 변수값들을 미리 다 모아서 선언  ex1)
function outer() { var result = inner; console.log(result) //result: undefined error var inner = function () { return &amp;quot;inner value&amp;quot;; } }  inner의 내부값이 assign되기 전으로 처리되어 에러 발생.
실제 처리된 결과:
function outer() { var result; var inner; console.log(result); inner = function () { return &amp;quot;inner value&amp;quot;; } }  ex2)
function outer() { var result = inner(); console.</description>
    </item>
    
  </channel>
</rss>
