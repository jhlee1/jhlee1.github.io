<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>spring on Code Repository</title>
    <link>https://jhlee1.github.io/tags/spring/</link>
    <description>Recent content in spring on Code Repository</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 29 Apr 2019 12:43:40 +0900</lastBuildDate>
    
        <atom:link href="https://jhlee1.github.io/tags/spring/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Spring JDBC Implementation</title>
      <link>https://jhlee1.github.io/2019/springmvc/</link>
      <pubDate>Mon, 29 Apr 2019 12:43:40 +0900</pubDate>
      
      <guid>https://jhlee1.github.io/2019/springmvc/</guid>
      <description>Spring MVC 1. MVC?  Model-View-Controller의 약자 제록스 연구소에서 일하던 린즈커그가 처음 소개한 개념으로, Desktop Application용으로 고안됨 Model: View가 렌더링하는데 필요한 Data  ex) 사용자가 요청한 상품 목록, 주문 내역  View: 실제 보이는 부분, Model을 사용하여 렌더링 한다.  ex) jsp, jsf, pdf, xml등으로 결과를 표현  Controller: 사용자의 액션에 응답하는 Componennt. Controller는 Model을 업데이트하고 다른 액션을 수행  2. Model 1 방식  Jsp에 HTML과 Java코드가 섞여서 복잡해짐  3.</description>
    </item>
    
    <item>
      <title>Spring JDBC Implementation</title>
      <link>https://jhlee1.github.io/2019/springjdbcimplementation/</link>
      <pubDate>Thu, 25 Apr 2019 12:43:40 +0900</pubDate>
      
      <guid>https://jhlee1.github.io/2019/springjdbcimplementation/</guid>
      <description>Spring JDBC 구현하기 1. DTO (Data Transfer Object)  계층간의 데이터 교환을 위한 Bean이다 계층 - Controller View, Business Layer, Persistence Layer를 의미 일반적으로 DTO는 로직을 갖고 있지 않고 순수한 Data 객체  2. DTO의 예  field, getter, setter를 가진다. 추가적으로, toString(), equals(), hashCode() 등의 Object가 가진 method를 @Override할 수 있다.  public class ActorDTO { private Long id; private String firstName; private String lastName; public String getFirstName() { return this.</description>
    </item>
    
    <item>
      <title>Spring JDBC</title>
      <link>https://jhlee1.github.io/2019/springjdbc/</link>
      <pubDate>Mon, 22 Apr 2019 12:43:40 +0900</pubDate>
      
      <guid>https://jhlee1.github.io/2019/springjdbc/</guid>
      <description>Spring JDBC 1. 개념  JDBC를 이용한 개발에서 반복적으로 등장하는 저수준 세부사항을 처리해준다 개발자는 필요한 부분만 개발     Action Spring Developer     Connection parameter 정의  O   Connection 오픈 O    SQL query  O   Parameter 선언과 Parameter Value 제공  O   Statement 준비와 실행 O    (존재한다면) 결과를 반복하는 Loop 설정 O    각 Iteration에 대한 작업 수행  O   Exception Handling - Spring에서 제공하는 Exception으로 변환 O    Connection, Statement, ResultSet 닫기 O     2.</description>
    </item>
    
    <item>
      <title>SpringCore</title>
      <link>https://jhlee1.github.io/2019/springcore/</link>
      <pubDate>Wed, 27 Feb 2019 23:10:04 +0900</pubDate>
      
      <guid>https://jhlee1.github.io/2019/springcore/</guid>
      <description>Spring Core 1. Spring 특징  엔터프라이즈급 어플리케이션을 구축할 수 있는 가벼운 솔루션이자, One-Stop-Shop(모든 과정을 한꺼번에 해결) 모듈화  약 20개의 모듈로 구성 필요한 모듈만 가져다 사용  IoC Container 선언적 Transaction을 관리할 수 있다 MVC Framework 제공 AOP  2. Spring Core 모듈  AOP와 Instrumentation
 spring-AOP : AOP 얼라이언스(Alliance)와 호환되는 방법으로 AOP를 지원 spring-aspects : AspectJ와의 통합을 제공 spring-instrument : instrumentation을 지원하는 클래스와 특정 WAS에서 사용하는 클래스로 더 구현체를 제공 BCI(Byte Code Instrumentations) - 런타임이나 로드(Load) 때 클래스의 바이트 코드에 변경을 가하는 방법  Messaging</description>
    </item>
    
  </channel>
</rss>
