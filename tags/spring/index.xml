<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>spring on Code Repository</title>
    <link>https://jhlee1.github.io/tags/spring/</link>
    <description>Recent content in spring on Code Repository</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 06 May 2019 23:23:40 +0900</lastBuildDate>
    
        <atom:link href="https://jhlee1.github.io/tags/spring/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>RestController</title>
      <link>https://jhlee1.github.io/2019/restcontroller/</link>
      <pubDate>Mon, 06 May 2019 23:23:40 +0900</pubDate>
      
      <guid>https://jhlee1.github.io/2019/restcontroller/</guid>
      <description>RestController 1. @RestController  Spring 4에서 RestAPI 또는 Web API를 개발하기 위해 등장 이전 버전의 @Controller와 @ResponseBody를 포함 Rest API를 구현하기 위해 MessageConverter가 중요함  2. MessageConvertor  자바 객체와 HTTP 요청 / 응답 바디를 변환하는 역할 (주로 Json) @ResponseBody, @RequestBody @EnableWebMvc 로 인한 기본 설정 WebMvcConfigurationSupport 를 사용하여 Spring MVC 구현 Default MessageConvertor 를 제공  3. JSON 응답하기  Controller의 메소드에서는 JSON으로 변환될 객체를 반환 @EnableWebMvc에서 jackson library를 기본 설정으로 사용함 jackson라이브러리를 추가하지 않으면 JSON메시지로 변환할 수 없어 500 Error 발생 사용자가 임의의 메시지 컨버터(MessageConverter)를 사용하도록 하려면 WebMvcConfigurerAdapter의 configureMessageConverters메소드를 @Override해야함  ex) GuestbookAPIController.</description>
    </item>
    
    <item>
      <title>LayeredArchitecture</title>
      <link>https://jhlee1.github.io/2019/layeredarchitecture/</link>
      <pubDate>Sun, 05 May 2019 23:10:36 +0900</pubDate>
      
      <guid>https://jhlee1.github.io/2019/layeredarchitecture/</guid>
      <description>Layered Architecture 1. Controller에서 중복되는 부분을 처리하려면?  별도의 객체로 분리 별도의 Method로 분리 쇼핑몰에서 게시판에서도 회원정보를 보여주고, 상품 목록 보기에서도 회원정보를 보여주는 경우 회원 정보를 읽어오는 코드는 어떻게 해야 할까?  2. Controller와 Service  비지니스 로직을 별도의 Service 객체를 구현하도록 하고 Controller는 Service 객체를 사용 Service 객체란  Business Logic을 수행하는 Method를 가지고 있는 객체 하나의 Business Logic은 하나의 Transaction으로 동작   3. Transaction  하나의 논리적인 작업을 의미</description>
    </item>
    
    <item>
      <title>LayeredArchitectureImplementation</title>
      <link>https://jhlee1.github.io/2019/layeredarchitectureimplementation/</link>
      <pubDate>Sun, 05 May 2019 18:01:53 +0900</pubDate>
      
      <guid>https://jhlee1.github.io/2019/layeredarchitectureimplementation/</guid>
      <description>Layered Architecture 실습 1. 방명록 만들기  Spring JDBC를 이용한 DAO 작성 Controller + Service + Dao Transaction 처리 Spring MVC에서 form 값 입력받기 Spring MVC에서 redirect하기 Controller에서 jsp에게 전달한 값을 JSTL과 EL을 이용해 출력하기 설정파일  Web Layer 설정 파일: web.xml, WebMvcContextConfiguration.java Business, Repository Layer 설정 파일: ApplicationConfig.java, DbConfig.java   2. 요구 사항  방명록 정보는 guestbook Table에 저장  id는 자동 입력 id, 이름, 내용, 등록일을 저장  http://localhost:8080/guestbook/을 요청하면 자동으로 /guestbook/list로 redirect  방명록이 없으면 건수는 0이 나오고 아래에 방명록을 입력하는 form이 보여진다.</description>
    </item>
    
    <item>
      <title>Spring MVC Implementation</title>
      <link>https://jhlee1.github.io/2019/springmvcimplementation/</link>
      <pubDate>Sun, 05 May 2019 06:59:02 +0900</pubDate>
      
      <guid>https://jhlee1.github.io/2019/springmvcimplementation/</guid>
      <description>Spring MVC 실습 1. Controller 작성 실습  브라우저에서 http://localhost:8080/mvcexam/plusform이라고 요청을 보내면 서버는 2개의 값을 입력받을 수 있는 입력 창과 버튼이 있는 화면을 보여줌 2개의 값을 입력하고 버튼을 클릭하면 POST http://localhost:8080/mvcexam/plus로 2개의 입력값이 전달됨. 서버는 두 값을 더한 후 jsp에게 request scope로 전달하여 출력  2. 프로젝트 세팅  maven 프로젝트에서 archetype을 webapp으로 생성 pom.xml 설정
 Dependency와 Plugin에 Maven compiler, JSTL, Servlet JSP, Spring 관련 설정들을 넣어준다.
&amp;lt;properties&amp;gt; &amp;lt;project.</description>
    </item>
    
    <item>
      <title>Spring MVC</title>
      <link>https://jhlee1.github.io/2019/springmvc/</link>
      <pubDate>Mon, 29 Apr 2019 12:43:40 +0900</pubDate>
      
      <guid>https://jhlee1.github.io/2019/springmvc/</guid>
      <description>Spring MVC 1. MVC?  Model-View-Controller의 약자 제록스 연구소에서 일하던 린즈커그가 처음 소개한 개념으로, Desktop Application용으로 고안됨 Model: View가 렌더링하는데 필요한 Data  ex) 사용자가 요청한 상품 목록, 주문 내역  View: 실제 보이는 부분, Model을 사용하여 렌더링 한다.  ex) jsp, jsf, pdf, xml등으로 결과를 표현  Controller: 사용자의 액션에 응답하는 Componennt. Controller는 Model을 업데이트하고 다른 액션을 수행  2. Model 1 방식  Jsp에 HTML과 Java코드가 섞여서 복잡해짐  3.</description>
    </item>
    
    <item>
      <title>Spring JDBC Implementation</title>
      <link>https://jhlee1.github.io/2019/springjdbcimplementation/</link>
      <pubDate>Thu, 25 Apr 2019 12:43:40 +0900</pubDate>
      
      <guid>https://jhlee1.github.io/2019/springjdbcimplementation/</guid>
      <description>Spring JDBC 구현하기 1. DTO (Data Transfer Object)  계층간의 데이터 교환을 위한 Bean이다 계층 - Controller View, Business Layer, Persistence Layer를 의미 일반적으로 DTO는 로직을 갖고 있지 않고 순수한 Data 객체  2. DTO의 예  field, getter, setter를 가진다. 추가적으로, toString(), equals(), hashCode() 등의 Object가 가진 method를 @Override할 수 있다.  public class ActorDTO { private Long id; private String firstName; private String lastName; public String getFirstName() { return this.</description>
    </item>
    
    <item>
      <title>Spring JDBC</title>
      <link>https://jhlee1.github.io/2019/springjdbc/</link>
      <pubDate>Mon, 22 Apr 2019 12:43:40 +0900</pubDate>
      
      <guid>https://jhlee1.github.io/2019/springjdbc/</guid>
      <description>Spring JDBC 1. 개념  JDBC를 이용한 개발에서 반복적으로 등장하는 저수준 세부사항을 처리해준다 개발자는 필요한 부분만 개발     Action Spring Developer     Connection parameter 정의  O   Connection 오픈 O    SQL query  O   Parameter 선언과 Parameter Value 제공  O   Statement 준비와 실행 O    (존재한다면) 결과를 반복하는 Loop 설정 O    각 Iteration에 대한 작업 수행  O   Exception Handling - Spring에서 제공하는 Exception으로 변환 O    Connection, Statement, ResultSet 닫기 O     2.</description>
    </item>
    
    <item>
      <title>SpringCore</title>
      <link>https://jhlee1.github.io/2019/springcore/</link>
      <pubDate>Wed, 27 Feb 2019 23:10:04 +0900</pubDate>
      
      <guid>https://jhlee1.github.io/2019/springcore/</guid>
      <description>Spring Core 1. Spring 특징  엔터프라이즈급 어플리케이션을 구축할 수 있는 가벼운 솔루션이자, One-Stop-Shop(모든 과정을 한꺼번에 해결) 모듈화  약 20개의 모듈로 구성 필요한 모듈만 가져다 사용  IoC Container 선언적 Transaction을 관리할 수 있다 MVC Framework 제공 AOP  2. Spring Core 모듈  AOP와 Instrumentation
 spring-AOP : AOP 얼라이언스(Alliance)와 호환되는 방법으로 AOP를 지원 spring-aspects : AspectJ와의 통합을 제공 spring-instrument : instrumentation을 지원하는 클래스와 특정 WAS에서 사용하는 클래스로 더 구현체를 제공 BCI(Byte Code Instrumentations) - 런타임이나 로드(Load) 때 클래스의 바이트 코드에 변경을 가하는 방법  Messaging</description>
    </item>
    
  </channel>
</rss>
