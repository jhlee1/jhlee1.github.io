<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Code Repository</title>
    <link>https://jhlee1.github.io/</link>
    <description>Recent content on Code Repository</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 24 Feb 2019 11:12:08 +0900</lastBuildDate>
    
        <atom:link href="https://jhlee1.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Maven</title>
      <link>https://jhlee1.github.io/2019/maven/</link>
      <pubDate>Sun, 24 Feb 2019 11:12:08 +0900</pubDate>
      
      <guid>https://jhlee1.github.io/2019/maven/</guid>
      <description>Maven 1. 기존 외부 Libray이용 방식의 문제점  직접 jar 파일을 받아서 /lib 속에 넣어줌  프로젝트가 복잡해질수록 사용하는 Library의 양이 많아지고 컴파일과 배포가 어려워짐 여러 사람이 함께 작업할 경우 관리가 어려움  Maven을 사용하면 를 추가해줌으로써 직접 다운로드 받거나 하는 것을 하지 않아도 라이브러리를 사용할 수 있다. Maven에 설정한 대로 모든 개발자가 일관된 방식으로 빌드 -&amp;gt; 빌드 방법에 대해 따로 가이드를 만들 필요 없음 Maven의 다양한 플러그인을 이용하여 많은 일들을 자동화  2.</description>
    </item>
    
    <item>
      <title>Maven</title>
      <link>https://jhlee1.github.io/2019/maven/</link>
      <pubDate>Sun, 24 Feb 2019 11:12:08 +0900</pubDate>
      
      <guid>https://jhlee1.github.io/2019/maven/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Week1_lec4</title>
      <link>https://jhlee1.github.io/2019/week1_lec4/</link>
      <pubDate>Sun, 24 Feb 2019 10:39:13 +0900</pubDate>
      
      <guid>https://jhlee1.github.io/2019/week1_lec4/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Week1_lec3</title>
      <link>https://jhlee1.github.io/2019/week1_lec3/</link>
      <pubDate>Sun, 24 Feb 2019 10:39:09 +0900</pubDate>
      
      <guid>https://jhlee1.github.io/2019/week1_lec3/</guid>
      <description></description>
    </item>
    
    <item>
      <title>마이크로서비스 vs. 모노리스</title>
      <link>https://jhlee1.github.io/2019/week1_lec2/</link>
      <pubDate>Sun, 24 Feb 2019 10:39:07 +0900</pubDate>
      
      <guid>https://jhlee1.github.io/2019/week1_lec2/</guid>
      <description>마이크로서비스 vs. 모노리스 1. 개념  하나의 어플리케이션을 여러개의 서비스 집합으로 구성하는 것 Service Oriented Architecture의 연장선  2. SOA VS. MSA     MSA SOA     공통점 서비스 중심 설계 지향    Ownership 하나의 독립된 팀에서 개발과 관리 여러 팀의 협업(서비스 공유를 위한 미들웨어)   Size SOA 대비 작음 MSA대비 큼   Share API로 공유 UDDI로 공유   Communication Restful API WSDL, SOAP 통신   Storage 서비스 상 별도의 저장소를 두고 인터페이스를 통한 데이터 캡슐화를 지향 -&amp;gt; 쉬운 분리 및 대체 가능 서비스상 저장소를 분리하지 않음 -&amp;gt; 통합 저장소 사용 시 서비스 분리가 어렵다.</description>
    </item>
    
    <item>
      <title>Biz 민첩성과 아키텍처 요건</title>
      <link>https://jhlee1.github.io/2019/week1_lec1/</link>
      <pubDate>Sun, 24 Feb 2019 09:49:59 +0900</pubDate>
      
      <guid>https://jhlee1.github.io/2019/week1_lec1/</guid>
      <description>Biz 민첩성과 아키텍처 요건 1. 11.6초  Amazon이 Application을 배포하는 주기 일반 온라인 기업 서비스 기획 -&amp;gt; 서비스 지원용 어플리케이션 개발 -&amp;gt; (개선 사항 발생) -&amp;gt; 수정 후 배포 vs. 국내 쇼핑몰 배포 주기 - 3일 최근 빠른 비지니스의 변화로 빠르게 대응할 능력이 필요함  2. 개발 문화의 변화 (DevOps)  &amp;ldquo;The traditional model is that you take your software to the wall that separates development and operations, and throw it over and then forget about it.</description>
    </item>
    
    <item>
      <title>SQL Data Definition Language</title>
      <link>https://jhlee1.github.io/2019/sql_ddl/</link>
      <pubDate>Sun, 17 Feb 2019 00:44:19 +0900</pubDate>
      
      <guid>https://jhlee1.github.io/2019/sql_ddl/</guid>
      <description> 1. DDL(Data Definition Language) </description>
    </item>
    
    <item>
      <title>SQL(Data Manipulation Language)</title>
      <link>https://jhlee1.github.io/2019/sql_dml/</link>
      <pubDate>Sun, 17 Feb 2019 00:35:56 +0900</pubDate>
      
      <guid>https://jhlee1.github.io/2019/sql_dml/</guid>
      <description>DML(Data Manipulation Language) 1. SELECT  기본형  SELECT(DISTINCT) column (ALIAS) FROM table;  SELECT - 찾는 데이터(Column)을 나열 DISTINCT - 중복행 제거 ALIAS - 나타날 Column에 대한 다른 이름 부여 FROM - 선택한 Column이 있는 테이블을 명시
 ex) 전체 데이터 검색
 SELECT * FROM DEPARTMANT;   +--------+------------+----------+ | deptno | name | location | +--------+------------+----------+ | 10 | ACCOUNTING | NEW YORK | | 20 | RESEARCH | DALLAS | | 30 | SALES | CHICAGO | | 40 | OPERATIONS | BOSTON | +--------+------------+----------+ 4 rows in set (0.</description>
    </item>
    
    <item>
      <title>SQL Basic</title>
      <link>https://jhlee1.github.io/2019/sqlbasic/</link>
      <pubDate>Sat, 16 Feb 2019 21:45:07 +0900</pubDate>
      
      <guid>https://jhlee1.github.io/2019/sqlbasic/</guid>
      <description>1. SQL이란  SQL은 데이터를 쉽게 검색하고 추가, 삭제, 수정 같은 조작을 할 수 있도록 만들어진 언어 RDBMS에서 데이터를 조작, 쿼리하는 표준 수단 키워드는 대소문자를 구분하지 않음 (아래의 쿼리는 모두 같다)  mysql&amp;gt; SELECT VERSION(), CURRENT_DATE; mysql&amp;gt; select version(), current_date; mysql&amp;gt; SeLeCT vErsiOn(), CUrrENT_DATE;  QUERY를 계산식으로 쓸 수 있다.  mysql&amp;gt; SELECT SIN(PI() / 4), (4+1) * 5;   +--------------------+-----------+ | SIN(PI() / 4) | (4+1) * 5 | +--------------------+-----------+ | 0.</description>
    </item>
    
    <item>
      <title>Install &amp; Set up My SQL</title>
      <link>https://jhlee1.github.io/2019/setupmysql/</link>
      <pubDate>Sat, 16 Feb 2019 21:12:24 +0900</pubDate>
      
      <guid>https://jhlee1.github.io/2019/setupmysql/</guid>
      <description>Set up MySQL Community Server in windows 1. 다운로드  https://www.mysql.com/downloads/ 여기서 Community Server의 다운로드 중 mysql-installer-community-X.0.XX.0.msi 받기
 web-community과 community 파일의 차이는 설치중에 파일을 받아서 설치하는 것 (인터넷 연결 필요)과 이미 설치파일에 들어있는 파일을 설치하는 것 (인터넷 연결 불필요). 따라서 설치 파일의 용량이 차이남
  2. 설치  msi파일을 실행 후 SetUp Type을 Developer Default로 설치 root 비밀번호만 정하고 Next 누르면됨 윈도우가 켜질 때 실행시키려면 Windows Service 설정에서 시작시 켜지도록 설정해놓으면 됨 환경변수 설정 - C:Program Files\MySQL\MySQL Server X.</description>
    </item>
    
    <item>
      <title>Database</title>
      <link>https://jhlee1.github.io/2019/database/</link>
      <pubDate>Fri, 15 Feb 2019 01:31:19 +0900</pubDate>
      
      <guid>https://jhlee1.github.io/2019/database/</guid>
      <description>Database와 DBMS(DataBase Management System) 1. 기본 개념  데이터의 집합(a Set of Data) 여러 응용 시스템(프로그램)들의 통합된 정보들을 저장하여 운영할 수 있는 공용(share) data의 집합 효율적으로 저장, 검색, 갱신할 수 있도록 데이터 집합들끼리 연관시키고 조직화되어야 한다.  2. 특성  실시간 접근성(Real-time Accessability)  사용자의 요구를 즉시 처리  계속적인 변화(Continuous Evolution)  정확한 값을 유지하려고 삽입, 삭제, 수정 작업 등을 이용해 데이터를 지속적으로 갱신  동시 공유성(Concurrent Sharing)  사용자마다 다른 목적으로 사용하므로 동시에 여러 사람이 동일한 데이터에 접근, 이용  내용 참조(Content Reference)  저장한 data의 record의 위치나 주소가 아닌 사용자가 요구하는 data의 내용, 즉 data 값에 따라 참조(reference)할 수 있어야 한다.</description>
    </item>
    
    <item>
      <title>JspBasic</title>
      <link>https://jhlee1.github.io/2019/jspbasic/</link>
      <pubDate>Wed, 06 Feb 2019 02:51:19 +0900</pubDate>
      
      <guid>https://jhlee1.github.io/2019/jspbasic/</guid>
      <description>JSP(Java Server Page)  모든 JSP는 Servlet으로 변경되어 작동한다. -&amp;gt; Servlet과 같은 LifeCycle을 가짐 &amp;lt;%@를 지시자라고 한다. &amp;lt;%@ page는 페이지 지시자라고 한다. JSP를 작성할 때 Servlet으로 어떻게 변경될까에 대해 생각하면서 하자 1 ~ 10까지 출력하는 예제   sum10.jsp &amp;lt;%@ page language=&amp;quot;java&amp;quot; contentType=&amp;quot;text/html; charset=UTF-8&amp;quot; pageEncoding=&amp;quot;UTF-8&amp;quot; %&amp;gt; &amp;lt;!DOCTYPE html PUBLIC &amp;quot;-//W3C//DTD HTML 4.01 Transitional//EN&amp;quot; &amp;quot;http://www.w3.org/TR/html4/loose.dtd&amp;quot;&amp;gt; &amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta http-equiv=&amp;quot;Content-Type&amp;quot; content=&amp;quot;text/html; charset=UTF-8&amp;quot;&amp;gt; &amp;lt;title&amp;gt;Insert title here&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;% int total = 0; for(int i = 1; i &amp;lt;= 10; i++) { total = total + i; } %&amp;gt; 1부터 10까지의 합: &amp;lt;%= total %&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt;   JSP의 LifeCycle</description>
    </item>
    
    <item>
      <title>JavascriptBasic</title>
      <link>https://jhlee1.github.io/2019/javascriptbasic/</link>
      <pubDate>Thu, 31 Jan 2019 22:35:29 +0900</pubDate>
      
      <guid>https://jhlee1.github.io/2019/javascriptbasic/</guid>
      <description>Javascript Hoisitng 함수는 실행되기 전 함수 안의 필요한 변수값들을 미리 다 모아서 선언  ex1)
function outer() { var result = inner; console.log(result) //result: undefined error var inner = function () { return &amp;quot;inner value&amp;quot;; } }  inner의 내부값이 assign되기 전으로 처리되어 에러 발생.
실제 처리된 결과:
function outer() { var result; var inner; console.log(result); inner = function () { return &amp;quot;inner value&amp;quot;; } }  ex2)
function outer() { var result = inner(); console.</description>
    </item>
    
    <item>
      <title>ServletBasic</title>
      <link>https://jhlee1.github.io/2019/servletbasic/</link>
      <pubDate>Wed, 30 Jan 2019 22:06:44 +0900</pubDate>
      
      <guid>https://jhlee1.github.io/2019/servletbasic/</guid>
      <description>Java Web Application의 폴더 구조
 WEB-INF가 반드시 존재해야됨 Servlet 3.0미만에선 web.xml이 필수적으로 있어야함. 이후 버전에는 annotation을 이용함  eclipse plugin
 eclipse의 workspace안에 .metadata/.plugins/org.eclipse.wst.server.core/tmp0을 열어보면 Tomcat과 비슷 구조이다. eclipse 내부적으로 Tomcat을 사용할 때 필요한 부분을 가져와서 쓴다고 생각하면 됨 wtpwebapps를 열어보면 여태까지 실습한 내용이 들어있음  Servlet이란?
 Java Web Application의 구성요소 중 동적 처리를 맡음 WAS에서 동작하는 Java class이다. HttpServlet class를 상속받아야한다 Servlet과 JSP로 최상의 결과를 얻으려면 조화롭게 사용해야 한다 (HTML은 JSP로, 복잡한 로직은 Servlet으로 처리)  Servlet 작동원리</description>
    </item>
    
    <item>
      <title>Links to Read</title>
      <link>https://jhlee1.github.io/2019/links-to-read/</link>
      <pubDate>Tue, 29 Jan 2019 23:55:46 +0900</pubDate>
      
      <guid>https://jhlee1.github.io/2019/links-to-read/</guid>
      <description>These are the links that I already / will read
 Hugo  https://github.com/Integerous/Integerous.github.io   </description>
    </item>
    
  </channel>
</rss>
